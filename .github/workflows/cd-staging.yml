name: CD — Deploy staging

on:
  workflow_run:
    workflows: ["CI monorepo — Pruebas unitarias"]
    types: [completed]
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  DDB_TABLE_NAME: LinklyTable-staging

jobs:
  deploy-database:
    name: Deploy · database (DynamoDB)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: AWS creds (temporales)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Deploy DynamoDB Table (idempotente)
        run: |
          aws cloudformation deploy \
            --stack-name linkly-database-staging \
            --template-file infra/database.yml \
            --parameter-overrides \
              Environment=staging

  deploy-redirect:
    name: Deploy · redirect
    runs-on: ubuntu-latest
    needs: [deploy-database]
    outputs:
      redirect_url: ${{ steps.out.outputs.redirect_url }}
    steps:
      - uses: actions/checkout@v4
      - name: AWS creds (temporales)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Calcular imagen
        id: img
        run: |
          echo "image=${{ env.DOCKERHUB_USER }}/linkly-ms-redirect:latest" >> $GITHUB_OUTPUT
      - name: Deploy CFN (redirect)
        run: |
          STACK=linkly-redirect-staging
          IMAGE="${{ steps.img.outputs.image }}"
          VPC="${{ secrets.VPC_ID }}"
          SUBNETS="${{ secrets.SUBNET_IDS }}"
          CIDR="${{ secrets.VPC_CIDR }}"

          aws cloudformation deploy \
            --stack-name $STACK \
            --template-file infra/linkly-service.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              ServiceName=$STACK \
              ImageUri=$IMAGE \
              ContainerPort=8080 \
              VpcId=$VPC \
              SubnetIds=$SUBNETS \
              VpcCidr=$CIDR \
              PublicALB=true \
              LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
              DdbTable=${{ env.DDB_TABLE_NAME }}
      - name: Output URL redirect
        id: out
        run: |
          URL=$(aws cloudformation describe-stacks --stack-name linkly-redirect-staging --query "Stacks[0].Outputs[?OutputKey=='ServiceUrl'].OutputValue" --output text)
          echo "redirect_url=$URL" >> $GITHUB_OUTPUT
          echo "Redirect URL: $URL"

  deploy-admin:
    name: Deploy · admin
    runs-on: ubuntu-latest
    needs: [deploy-database]
    outputs:
      admin_url: ${{ steps.out.outputs.admin_url }}
    steps:
      - uses: actions/checkout@v4
      - name: AWS creds (temporales)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Calcular imagen
        id: img
        run: |
          echo "image=${{ env.DOCKERHUB_USER }}/linkly-ms-admin:latest" >> $GITHUB_OUTPUT
      - name: Deploy CFN (admin)
        run: |
          STACK=linkly-admin-staging
          IMAGE="${{ steps.img.outputs.image }}"
          VPC="${{ secrets.VPC_ID }}"
          SUBNETS="${{ secrets.SUBNET_IDS }}"
          CIDR="${{ secrets.VPC_CIDR }}"
          
          aws cloudformation deploy \
            --stack-name $STACK \
            --template-file infra/linkly-service.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              ServiceName=$STACK \
              ImageUri=$IMAGE \
              ContainerPort=8080 \
              VpcId=$VPC \
              SubnetIds=$SUBNETS \
              VpcCidr=$CIDR \
              PublicALB=true \
              LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
              DdbTable=${{ env.DDB_TABLE_NAME }}
      - name: Output URL admin (interno)
        id: out
        run: |
          URL=$(aws cloudformation describe-stacks --stack-name linkly-admin-staging --query "Stacks[0].Outputs[?OutputKey=='ServiceUrl'].OutputValue" --output text)
          echo "admin_url=$URL" >> $GITHUB_OUTPUT
          echo "Admin URL (interno): $URL"

  deploy-frontend:
    name: Deploy · frontend
    runs-on: ubuntu-latest
    needs: [deploy-redirect, deploy-admin]
    outputs:
      frontend_url: ${{ steps.out.outputs.frontend_url }}
    steps:
      - uses: actions/checkout@v4
      - name: AWS creds (temporales)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Calcular imagen
        id: img
        run: |
          echo "image=${{ env.DOCKERHUB_USER }}/linkly-frontend:latest" >> $GITHUB_OUTPUT
      - name: Deploy CFN (frontend)
        env:
          ADMIN_URL: ${{ needs.deploy-admin.outputs.admin_url }}
          REDIRECT_URL: ${{ needs.deploy-redirect.outputs.redirect_url }}
        run: |
          STACK=linkly-frontend-staging
          IMAGE="${{ steps.img.outputs.image }}"
          VPC="${{ secrets.VPC_ID }}"
          SUBNETS="${{ secrets.SUBNET_IDS }}"
          CIDR="${{ secrets.VPC_CIDR }}"

          aws cloudformation deploy \
            --stack-name $STACK \
            --template-file infra/linkly-service.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              ServiceName=$STACK \
              ImageUri=$IMAGE \
              ContainerPort=5000 \
              VpcId=$VPC \
              SubnetIds=$SUBNETS \
              VpcCidr=$CIDR \
              PublicALB=true \
              LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
              AdminApiUrl=$ADMIN_URL \
              BaseDomain=$REDIRECT_URL \
              AppBaseUrl="" \
              DdbTable=${{ env.DDB_TABLE_NAME }}
      - name: Output URL frontend
        id: out
        run: |
          URL=$(aws cloudformation describe-stacks --stack-name linkly-frontend-staging --query "Stacks[0].Outputs[?OutputKey=='ServiceUrl'].OutputValue" --output text)
          echo "frontend_url=$URL" >> $GITHUB_OUTPUT
          echo "Frontend URL: $URL"

  # --- Job 5: Pruebas de Aceptación - MS-ADMIN (SMOKE /health) ---
  test-acceptance-admin:
    name: Test · Acceptance (ms-admin)
    runs-on: ubuntu-latest
    needs: [deploy-admin]
    steps:
      - name: Smoke /health (admin)
        env:
          ADMIN_URL: ${{ needs.deploy-admin.outputs.admin_url }}
        run: |
          set -euo pipefail
          URL="${ADMIN_URL%/}/health"
          echo "Haciendo smoke a: $URL"
          for i in {1..30}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL") || true
            echo "Intento $i => HTTP $CODE"
            if [ "$CODE" = "200" ]; then
              echo "OK admin /health"
              exit 0
            fi
            sleep 5
          done
          echo "Admin /health no respondió 200 a tiempo"; exit 1

  # --- Job 6: Pruebas de Aceptación - FRONTEND (SMOKE /health) ---
  test-acceptance-frontend:
    name: Test · Acceptance (frontend)
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-admin, deploy-redirect]
    steps:
      - name: Smoke /health (frontend)
        env:
          FRONTEND_URL: ${{ needs.deploy-frontend.outputs.frontend_url }}
        run: |
          set -euo pipefail
          URL="${FRONTEND_URL%/}/health"
          echo "Haciendo smoke a: $URL"
          for i in {1..30}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL") || true
            echo "Intento $i => HTTP $CODE"
            if [ "$CODE" = "200" ]; then
              echo "OK frontend /health"
              exit 0
            fi
            sleep 5
          done
          echo "Frontend /health no respondió 200 a tiempo"; exit 1

  # --- Job 7: Pruebas de Aceptación - MS-REDIRECT (SMOKE /health) ---
  test-acceptance-redirect:
    name: Test · Acceptance (ms-redirect)
    runs-on: ubuntu-latest
    needs: [deploy-redirect]
    steps:
      - name: Smoke /health (redirect)
        env:
          REDIRECT_URL: ${{ needs.deploy-redirect.outputs.redirect_url }}
        run: |
          set -euo pipefail
          URL="${REDIRECT_URL%/}/health"
          echo "Haciendo smoke a: $URL"
          for i in {1..30}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL") || true
            echo "Intento $i => HTTP $CODE"
            if [ "$CODE" = "200" ]; then
              echo "OK redirect /health"
              exit 0
            fi
            sleep 5
          done
          echo "Redirect /health no respondió 200 a tiempo"; exit 1
