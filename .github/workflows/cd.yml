name: CD â€” ProducciÃ³n AWS ECS (solo prod)

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ROOT_DOMAIN: linkly.space
  APP_DOMAIN: app.linkly.space
  ADMIN_DOMAIN: admin.linkly.space

jobs:
  deploy-prod:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Credenciales VocLabs + asumir LabRole (sin session tags)
      - name: Configure AWS (assume LabRole)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          role-to-assume:        ${{ secrets.LAB_ROLE_ARN }}
          role-session-name:     linkly-prod-deploy
          role-skip-session-tagging: true
          aws-region:            ${{ env.AWS_REGION }}

      # ---------- CORE (ALB + SG) ----------
      - name: Preflight â€” core (delete if ROLLBACK_COMPLETE)
        run: |
          set -euo pipefail
          STACK="linkly-production-core"
          STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK" \
            --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NONE")
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            aws cloudformation delete-stack --stack-name "$STACK"
            aws cloudformation wait stack-delete-complete --stack-name "$STACK"
          fi

      - name: Deploy Core (ALB + SG)
        run: |
          set -euo pipefail
          aws cloudformation deploy \
            --template-file infra/linkly-core-prod.yaml \
            --stack-name linkly-production-core \
            --parameter-overrides \
              Environment=production \
              VpcId=${{ secrets.VPC_ID }} \
              SubnetIds="${{ secrets.SUBNET_IDS }}" \
              RootDomain=${{ env.ROOT_DOMAIN }} \
              AppDomain=${{ env.APP_DOMAIN }} \
              AdminDomain=${{ env.ADMIN_DOMAIN }} \
            --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changes

      # ---------- DATA (DynamoDB) ----------
      - name: Preflight â€” data (delete if ROLLBACK_COMPLETE)
        run: |
          set -euo pipefail
          STACK="linkly-production-data"
          STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK" \
            --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NONE")
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            aws cloudformation delete-stack --stack-name "$STACK"
            aws cloudformation wait stack-delete-complete --stack-name "$STACK"
          fi

      - name: Deploy Data (DynamoDB)
        run: |
          set -euo pipefail
          aws cloudformation deploy \
            --template-file infra/linkly-data-prod.yaml \
            --stack-name linkly-production-data \
            --parameter-overrides Environment=production \
            --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changes

      # ---------- ECS SERVICES ----------
      - name: Preflight â€” ecs (delete if ROLLBACK_COMPLETE)
        run: |
          set -euo pipefail
          STACK="linkly-production-ecs"
          STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK" \
            --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "NONE")
          if [ "$STATUS" = "ROLLBACK_COMPLETE" ]; then
            aws cloudformation delete-stack --stack-name "$STACK"
            aws cloudformation wait stack-delete-complete --stack-name "$STACK"
          fi

      - name: Deploy ECS Services (frontend, admin, redirect)
        run: |
          set -euo pipefail
          aws cloudformation deploy \
            --template-file infra/linkly-ecs-services-prod.yaml \
            --stack-name linkly-production-ecs \
            --parameter-overrides \
              Environment=production \
              LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
              DockerHubUser=${{ secrets.DOCKERHUB_USERNAME }} \
              RootDomain=${{ env.ROOT_DOMAIN }} \
              AppDomain=${{ env.APP_DOMAIN }} \
              AdminDomain=${{ env.ADMIN_DOMAIN }} \
            --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changes

      # ---------- Mostrar URL del ALB ----------
      - name: Mostrar URL pÃºblica (ALB)
        run: |
          set -euo pipefail
          ALB_URL=$(aws cloudformation describe-stacks \
            --stack-name linkly-production-core \
            --query "Stacks[0].Outputs[?OutputKey=='ALBDnsName'].OutputValue" \
            --output text)
          echo "âœ… ProducciÃ³n lista:"
          echo "ðŸ”— http://$ALB_URL"
