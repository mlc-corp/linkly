name: CD — Deploy Linkly (multi-ALB)

on:
  workflow_run:
    workflows: ["CI monorepo — Pruebas unitarias"]
    types: [completed]
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  DDB_TABLE_NAME: LinklyTable-production

jobs:
  deploy-database:
    name: Deploy · database (DynamoDB)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: AWS creds (temporales)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Deploy DynamoDB Table (idempotente)
        run: |
          aws cloudformation deploy \
            --stack-name linkly-database \
            --template-file infra/database.yml \
            --parameter-overrides \
              Environment=production

  deploy-redirect:
    name: Deploy · redirect
    runs-on: ubuntu-latest
    needs: [deploy-database]
    outputs:
      redirect_url: ${{ steps.out.outputs.redirect_url }}
    steps:
      - uses: actions/checkout@v4
      - name: AWS creds (temporales)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Calcular imagen
        id: img
        run: |
          # --- CAMBIO ---
          # Usamos :latest en lugar del SHA como tag.
          echo "image=${{ env.DOCKERHUB_USER }}/linkly-ms-redirect:latest" >> $GITHUB_OUTPUT
      - name: Deploy CFN (redirect)
        run: |
          STACK=linkly-redirect
          IMAGE="${{ steps.img.outputs.image }}"
          VPC="${{ secrets.VPC_ID }}"
          SUBNETS="${{ secrets.SUBNET_IDS }}"
          CIDR="${{ secrets.VPC_CIDR }}"

          aws cloudformation deploy \
            --stack-name $STACK \
            --template-file infra/linkly-service.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              ServiceName=$STACK \
              ImageUri=$IMAGE \
              ContainerPort=8080 \
              VpcId=$VPC \
              SubnetIds=$SUBNETS \
              VpcCidr=$CIDR \
              PublicALB=true \
              LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
              DdbTable=${{ env.DDB_TABLE_NAME }}
      - name: Output URL redirect
        id: out
        run: |
          URL=$(aws cloudformation describe-stacks --stack-name linkly-redirect --query "Stacks[0].Outputs[?OutputKey=='ServiceUrl'].OutputValue" --output text)
          echo "redirect_url=$URL" >> $GITHUB_OUTPUT
          echo "Redirect URL: $URL"

  deploy-admin:
    name: Deploy · admin
    runs-on: ubuntu-latest
    needs: [deploy-database]
    outputs:
      admin_url: ${{ steps.out.outputs.admin_url }}
    steps:
      - uses: actions/checkout@v4
      - name: AWS creds (temporales)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Calcular imagen
        id: img
        run: |
          # --- CAMBIO ---
          # Usamos :latest en lugar del SHA como tag.
          echo "image=${{ env.DOCKERHUB_USER }}/linkly-ms-admin:latest" >> $GITHUB_OUTPUT
      - name: Deploy CFN (admin)
        run: |
          STACK=linkly-admin
          IMAGE="${{ steps.img.outputs.image }}"
          VPC="${{ secrets.VPC_ID }}"
          SUBNETS="${{ secrets.SUBNET_IDS }}"
          CIDR="${{ secrets.VPC_CIDR }}"
          
          aws cloudformation deploy \
            --stack-name $STACK \
            --template-file infra/linkly-service.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              ServiceName=$STACK \
              ImageUri=$IMAGE \
              ContainerPort=8080 \
              VpcId=$VPC \
              SubnetIds=$SUBNETS \
              VpcCidr=$CIDR \
              PublicALB=true \
              LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
              DdbTable=${{ env.DDB_TABLE_NAME }}
      - name: Output URL admin (interno)
        id: out
        run: |
          URL=$(aws cloudformation describe-stacks --stack-name linkly-admin --query "Stacks[0].Outputs[?OutputKey=='ServiceUrl'].OutputValue" --output text)
          echo "admin_url=$URL" >> $GITHUB_OUTPUT
          echo "Admin URL (interno): $URL"

  deploy-frontend:
    name: Deploy · frontend
    runs-on: ubuntu-latest
    needs: [deploy-redirect, deploy-admin]
    outputs:
      frontend_url: ${{ steps.out.outputs.frontend_url }}
    steps:
      - uses: actions/checkout@v4
      - name: AWS creds (temporales)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Calcular imagen
        id: img
        run: |
          # --- CAMBIO ---
          # Usamos :latest en lugar del SHA como tag.
          echo "image=${{ env.DOCKERHUB_USER }}/linkly-frontend:latest" >> $GITHUB_OUTPUT
      - name: Deploy CFN (frontend)
        env:
          ADMIN_URL: ${{ needs.deploy-admin.outputs.admin_url }}
          REDIRECT_URL: ${{ needs.deploy-redirect.outputs.redirect_url }}
        run: |
          STACK=linkly-frontend
          IMAGE="${{ steps.img.outputs.image }}"
          VPC="${{ secrets.VPC_ID }}"
          SUBNETS="${{ secrets.SUBNET_IDS }}"
          CIDR="${{ secrets.VPC_CIDR }}"

          aws cloudformation deploy \
            --stack-name $STACK \
            --template-file infra/linkly-service.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              ServiceName=$STACK \
              ImageUri=$IMAGE \
              ContainerPort=5000 \
              VpcId=$VPC \
              SubnetIds=$SUBNETS \
              VpcCidr=$CIDR \
              PublicALB=true \
              LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
              AdminApiUrl=$ADMIN_URL \
              BaseDomain=$REDIRECT_URL \
              AppBaseUrl="" \
              DdbTable=${{ env.DDB_TABLE_NAME }}
      - name: Output URL frontend
        id: out
        run: |
          URL=$(aws cloudformation describe-stacks --stack-name linkly-frontend --query "Stacks[0].Outputs[?OutputKey=='ServiceUrl'].OutputValue" --output text)
          echo "frontend_url=$URL" >> $GITHUB_OUTPUT
          echo "Frontend URL: $URL"
  # --- Job 5: Pruebas de Aceptación - MS-ADMIN ---
  test-acceptance-admin:
    name: Test · Acceptance (ms-admin)
    runs-on: ubuntu-latest
    needs: [deploy-admin] # Depende de que el admin esté desplegado
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' 
          cache: 'pip'
          cache-dependency-path: ms-admin/requirements*.txt 
      - name: Install test dependencies (ms-admin)
        run: |
          python -m pip install --upgrade pip
          pip install -r ms-admin/requirements.txt
      - name: Espera prudencial
        run: sleep 30
      - name: Run ms-admin Acceptance Tests
        env:
          # Pasa la URL del admin desplegado
          APP_BASE_URL: ${{ needs.deploy-admin.outputs.admin_url }} 
          DDB_TABLE: ${{ env.DDB_TABLE_NAME }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        run: |
          echo "--- Running ms-admin acceptance tests ---"
          # Ajusta la ruta a tus pruebas E2E/Acceptance de admin
          pytest ms-admin/tests/acceptance/

  # --- Job 6: Pruebas de Aceptación - FRONTEND ---
  test-acceptance-frontend:
    name: Test · Acceptance (frontend)
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-admin, deploy-redirect] # Depende de todos
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: frontend/requirements*.txt 
      - name: Install test dependencies (frontend)
        run: |
          python -m pip install --upgrade pip
          pip install -r frontend/requirements.txt
      - name: Espera prudencial
        run: sleep 30
      - name: Run frontend Acceptance Tests
        env:
          APP_BASE_URL: ${{ needs.deploy-frontend.outputs.frontend_url }} # URL del frontend
          ADMIN_API_URL: ${{ needs.deploy-admin.outputs.admin_url }}      # URL del admin
          REDIRECT_URL: ${{ needs.deploy-redirect.outputs.redirect_url }} # URL del redirect
          # No necesita credenciales AWS si las pruebas solo interactúan vía HTTP
        run: |
          echo "--- Running frontend acceptance tests ---"
          # Ajusta la ruta a tus pruebas de aceptación/E2E del frontend
          # pytest frontend/tests/test_acceptance_app.py 

  # --- Job 7: Pruebas de Aceptación - MS-REDIRECT ---
  test-acceptance-redirect:
    name: Test · Acceptance (ms-redirect)
    runs-on: ubuntu-latest
    needs: [deploy-redirect] # Depende solo del redirect
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Ajusta la versión si es necesario
          cache: 'npm'
          cache-dependency-path: ms-redirect/package-lock.json
      - name: Install test dependencies (ms-redirect)
        working-directory: ms-redirect # Asegura ejecutar npm en la carpeta correcta
        run: npm ci
      - name: Espera prudencial
        run: sleep 30
      - name: Run ms-redirect Acceptance Tests
        env:
          # Pasa la URL del redirector desplegado
          APP_BASE_URL: ${{ needs.deploy-redirect.outputs.redirect_url }} 
          DDB_TABLE: ${{ env.DDB_TABLE_NAME }}
          AWS_REGION: ${{ env.AWS_REGION }}
          # Credenciales AWS si las pruebas de redirect necesitan interactuar con DynamoDB
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        working-directory: ms-redirect # Ejecuta npm test en la carpeta correcta
        run: |
          npm run test:e2e
