AWSTemplateFormatVersion: '2010-09-09'
Description: Linkly Core (ALB + TGs + SGs + ECS Cluster) usando VPC/Subnets existentes

Parameters:
  Environment:
    Type: String
    AllowedValues: [staging, production]
    Default: staging
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  RootDomain:
    Type: String
    Default: linkly.space
  AppDomain:
    Type: String
    Default: app.linkly.space
  AdminDomain:
    Type: String
    Default: admin.linkly.space

Resources:
  ALBSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB SG
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0 }
      Tags: [{ Key: Name, Value: !Sub linkly-${Environment}-alb-sg }]

  ServicesSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Services SG
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - { IpProtocol: tcp, FromPort: 1, ToPort: 65535, SourceSecurityGroupId: !Ref ALBSg }
      Tags: [{ Key: Name, Value: !Sub linkly-${Environment}-services-sg }]

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub linkly-${Environment}-cluster

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub linkly-${Environment}-alb
      Scheme: internet-facing
      Type: application
      SecurityGroups: [!Ref ALBSg]
      Subnets: !Ref SubnetIds

  Listener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig: { StatusCode: '404' }

  TgFrontend:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub tg-frontend-${Environment}
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 5000
      TargetType: ip
      HealthCheckPath: /health

  TgAdmin:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub tg-admin-${Environment}
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 8080
      TargetType: ip
      HealthCheckPath: /health

  TgRedirect:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub tg-redirect-${Environment}
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 8080
      TargetType: ip
      HealthCheckPath: /health

  RuleAppHost:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener80
      Priority: 10
      Conditions:
        - Field: host-header
          HostHeaderConfig: { Values: [!Ref AppDomain] }
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TgFrontend

  RuleAdminHost:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener80
      Priority: 20
      Conditions:
        - Field: host-header
          HostHeaderConfig: { Values: [!Ref AdminDomain] }
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TgAdmin

  RuleRootHost:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener80
      Priority: 30
      Conditions:
        - Field: host-header
          HostHeaderConfig: { Values: [!Ref RootDomain] }
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TgRedirect

Outputs:
  ClusterName:
    Value: !Ref Cluster
    Export: { Name: !Sub linkly-${Environment}-Cluster }

  ALBDnsName:
    Value: !GetAtt ALB.DNSName
    Export: { Name: !Sub linkly-${Environment}-ALBDnsName }

  ServicesSgId:
    Value: !Ref ServicesSg
    Export: { Name: !Sub linkly-${Environment}-ServicesSg }

  PublicSubnetsCsv:
    Description: Passthrough de las subnets para importarlas en ECS Services
    Value: !Join [",", !Ref SubnetIds]
    Export: { Name: !Sub linkly-${Environment}-PublicSubnets }

  TgFrontendArn:
    Value: !Ref TgFrontend
    Export: { Name: !Sub linkly-${Environment}-TgFrontend }
  TgAdminArn:
    Value: !Ref TgAdmin
    Export: { Name: !Sub linkly-${Environment}-TgAdmin }
  TgRedirectArn:
    Value: !Ref TgRedirect
    Export: { Name: !Sub linkly-${Environment}-TgRedirect }
