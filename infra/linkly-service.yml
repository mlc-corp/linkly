AWSTemplateFormatVersion: '2010-09-09'
Description: Linkly - Servicio ECS Fargate con ALB (público o interno)

Parameters:
  ServiceName:
    Type: String
  ImageUri:
    Type: String
  ContainerPort:
    Type: Number
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  VpcCidr:
    Type: String
    Description: "CIDR de la VPC (para SG interno)"
  PublicALB:
    Type: String
    AllowedValues: ["true", "false"]
    Description: "true = ALB público, false = ALB interno (solo VPC)"
  
  # --- NUEVO PARÁMETRO ---
  # Se añade el parámetro para recibir el Rol de Tarea (con permisos de DDB)
  LabRoleArn:
    Type: String
    Description: "IAM Role ARN para que la tarea acceda a DynamoDB"

  AdminApiUrl:
    Type: String
    Default: ""
  BaseDomain:
    Type: String
    Default: ""
  AppBaseUrl:
    Type: String
    Default: ""
  DdbTable:
    Type: String
    Default: "LinklyTable"

Conditions:
  IsPublic: !Equals [ !Ref PublicALB, "true" ]

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ServiceName

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ServiceName}"
      RetentionInDays: 7

  # Rol de Ejecución (para iniciar el contenedor) - Esto se queda igual
  TaskExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ecs-tasks.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceName
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecRole.Arn # Rol de Ejecución
      
      # --- CORRECCIÓN ---
      # Se asigna el Rol de Tarea (con permisos de DDB)
      TaskRoleArn: !Ref LabRoleArn

      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref ImageUri
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            # Comunes
            - Name: PORT
              Value: !Ref ContainerPort
            - Name: AWS_REGION
              Value: us-east-1
            - Name: DDB_TABLE
              Value: !Ref DdbTable
            # Frontend
            - Name: ADMIN_API_URL
              Value: !Ref AdminApiUrl
            - Name: FLASK_PORT
              Value: !Ref ContainerPort
            - Name: FLASK_DEBUG
              Value: "False"
            - Name: BASE_DOMAIN
              Value: !Ref BaseDomain
            - Name: APP_BASE_URL
              Value: !Ref AppBaseUrl
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs

  AlbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: !Sub "ALB SG - ${ServiceName}"
      SecurityGroupIngress:
        - !If
          - IsPublic
          - { IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0 }
          - { IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: !Ref VpcCidr }

  ServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: !Sub "Service SG - ${ServiceName}"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref AlbSG

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ServiceName}-alb"
      Scheme: !If [ IsPublic, internet-facing, internal ]
      Subnets: !Ref SubnetIds
      SecurityGroups: [ !Ref AlbSG ]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /health

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: [ !Ref ServiceSG ]
          Subnets: !Ref SubnetIds
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

Outputs:
  ServiceUrl:
    Description: URL (ALB DNS)
    Value: !Sub "http://${ALB.DNSName}"

